import Qs from 'qs'
import axios from 'axios'
import {
  baseUrl
} from "./env.js";
import {
  Message,
  Loading
} from 'element-ui';

axios.defaults.baseURL = baseUrl;
axios.defaults.timeout = 20000;
// 允许携带cookie
// axios.defaults.withCredentials = true;

window._axiosPromiseArr = [];

// http request 拦截器
axios.interceptors.request.use(
  config => {
    Loading.service({
      background: "rgba(0, 0, 0, 0.4)",
      fullscreen: true,
      lock: true,
    })

    config.data = Qs.stringify(config.data);
    config.headers = {
      'Content-Type': 'application/x-www-form-urlencoded;multipart/form-data'
      // 'application/json',
      //'application/x-www-form-urlencoded',
      // 指定允许其他域名访问
      // "Access-Control-Allow-Origin": "*",
    };
    config.cancelToken = new axios.CancelToken(cancel => {
      window._axiosPromiseArr.push({
        cancel
      })
    })

    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

let serviceLoading = Loading.service({
  background: "rgba(0, 0, 0, 0.4)",
  fullscreen: true,
  lock: true,
})

// 响应拦截器即异常处理  
axios.interceptors.response.use(response => {
  serviceLoading.close();

  let status = response.data.server_status;

  if (status && status != 200) {
    Message({
      message: `状态码${status}, ${response.data.server_error}`,
      type: 'error',
      duration: 3 * 1000
    })
  }

  return response
}, err => {

  // 利用loading的单例属性关闭loading
  serviceLoading.close();

  // 取消请求时取消提示
  if (axios.isCancel(err)) {
    Message.closeAll();
    return
  }

  if (err.hasOwnProperty('response') && typeof err.response != 'undefined') {
    Message({
      message: `错误码${err.response.status}， ${err.response.data.message}`,
      type: 'error',
      duration: 3 * 1000
    })
  } else {
    Message({
      message: err,
      type: 'error',
      duration: 3 * 1000
    })
  }

  return Promise.resolve(err.response)
})


/**
 * 封装get方法
 * @param url
 * @param data
 * @returns {Promise}
 */
export function fetch(url, params) {
  return new Promise((resolve, reject) => {
    axios.get(url, {
        params: params
      })
      .then(response => {
        resolve(response.data);
      })
      .catch(err => {
        reject(err)
      })
  })
}


/**
 * 封装post请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function post(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.post(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}

/**
 * 封装patch请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function patch(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.patch(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}

/**
 * 封装put请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function put(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.put(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}

/**
 * 封装delete请求
 * @param url
 * @param data
 * @returns {Promise}
 */
export function deleteMethod(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.delete(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}
