<template>
  <div id="trajectory-container">
    <!-- content start -->
    <div class="content-container">
      <!-- map -->
      <div class id="trajectory-cesium"></div>

      <div class id="right-side">
        <!-- 查询参数 -->
        <div class="container1">
          <div class="title">查询参数</div>
          <div class="condition">
            <el-form
              :model="ruleForm"
              :rules="rules"
              ref="ruleForm"
              label-width="90px"
              class="demo-ruleForm"
            >
              <!-- 人员 -->
              <el-form-item label="用户ID" prop="trackId">
                <el-input
                  v-model="ruleForm.trackId"
                  @change="finishIdInputEvent"
                ></el-input>
              </el-form-item>

              <!-- 开始时间 -->
              <el-form-item prop="startTime" label="开始时间" required>
                <el-date-picker
                  type="datetime"
                  placeholder="选择日期"
                  v-model="ruleForm.startTime"
                  :picker-options="pickerOptions"
                ></el-date-picker>
              </el-form-item>

              <!-- 结束时间 -->
              <el-form-item prop="endTime" label="结束时间" required>
                <el-date-picker
                  type="datetime"
                  placeholder="选择日期"
                  v-model="ruleForm.endTime"
                  :picker-options="pickerOptions"
                ></el-date-picker>
              </el-form-item>
            </el-form>

            <el-button type="primary" @click="resetTrack('ruleForm')"
              >重置</el-button
            >
            <el-button
              type="primary"
              :class="isLegal ? '' : 'disable'"
              :disabled="!isLegal"
              @click="buildTrack('ruleForm')"
              >查询</el-button
            >
          </div>

          <!-- 结果列表 -->
          <div class="" id="track-result">
            <build-track
              v-if="showResult"
              @displayResult="showResult = false"
            />
          </div>
        </div>
      </div>
    </div>
    <!-- content end -->
  </div>
</template>

<script>
import { defaultInitCesium } from "assets/js/MapInit.js";
import { add2dFillAndBorderGrids } from "assets/js/MapEvent.js";
import { server } from "request/api.js";
import { hubeiGeoRect } from "request/env";
import { GMTToStr } from "assets/js/Time.js";
import BuildTrack from "./ResultList";

export default {
  data() {
    return {
      trackViewer: null,
      ruleForm: {
        // 轨迹ids
        trackId: "",
        // 开始时间
        startTime: new Date() - 14 * 24 * 3600 * 1000,
        // 结束时间
        endTime: new Date(),
      },
      rules: {
        trackId: [
          { required: true, message: "请输入人员ID", trigger: "change" },
        ],
        startTime: [
          {
            type: "date",
            required: true,
            message: "请选择开始时间",
            trigger: "change",
          },
        ],
        endTime: [
          {
            type: "date",
            required: true,
            message: "请选择结束时间",
            trigger: "change",
          },
        ],
      },
      // 显示线轨迹
      showLineTrack: true,
      lines: [],
      pickerOptions: {
        disabledDate(time) {
          return time.getTime() > Date.now();
        },
      },
      // 轨迹网格
      track_grid_primitives: null,
      // 人员id有效
      isLegal: false,
      // 显示结果列表
      showResult: true,
    };
  },
  components: {
    BuildTrack,
  },
  mounted() {
    this.initScene();
  },
  methods: {
    // 场景初始化
    initScene() {
      this.trackViewer = defaultInitCesium("trajectory-cesium", "google", true);

      // 初始化位置
      this.trackViewer.camera.setView({
        destination: Cesium.Rectangle.fromDegrees(
          hubeiGeoRect[0],
          hubeiGeoRect[1],
          hubeiGeoRect[2],
          hubeiGeoRect[3]
        ),
      });

      this.trackViewer.dataSources.add(
        Cesium.GeoJsonDataSource.load("static/hubei.geojson", {
          stroke: Cesium.Color.SKYBLUE,
          fill: Cesium.Color.SKYBLUE.withAlpha(0.4),
          strokeWidth: 3,
        })
      );

      // 轨迹网格
      this.track_grid_primitives = this.trackViewer.scene.primitives.add(
        new Cesium.PrimitiveCollection()
      );
    },

    // 验证人员有效性
    finishIdInputEvent(val) {
      this.isLegal = false;
      this.vertifyTheLegalOfIds({ track_id_list: val });
    },

    // 绘制轨迹
    drawTrack(trackData) {
      let startPoints = [];
      let endPoints = [];

      trackData.forEach((track) => {
        let linePoints = [];

        track.list.forEach((point) => {
          linePoints.push(
            point.boundary[0],
            point.boundary[1],
            point.floor_height
          );
        });

        let redRandom = Math.floor(Math.random(1) * 100);
        let greenRandom = Math.floor(Math.random(1) * 255);
        let blueRandom = Math.floor(Math.random(1) * 255);

        let randomColor = Cesium.Color.fromRandom({
          red: redRandom / 255,
          green: greenRandom / 255,
          blue: blueRandom / 255,
          alpha: 1,
        });

        let fillColor = Cesium.Color.fromRandom({
          red: redRandom / 255,
          green: greenRandom / 255,
          blue: blueRandom / 255,
          alpha: 0.4,
        });

        // 绘制折线轨迹
        let lineEntity = this.trackViewer.entities.add({
          polyline: {
            positions: Cesium.Cartesian3.fromDegreesArrayHeights(linePoints),
            width: 2,
            material: new Cesium.PolylineDashMaterialProperty({
              color: fillColor,
            }),
          },
        });

        this.lines.push(lineEntity);
        lineEntity.show = this.showLineTrack;

        // 添加网格轨迹
        add2dFillAndBorderGrids(
          track.list,
          this.track_grid_primitives,
          Cesium.ColorGeometryInstanceAttribute.fromColor(fillColor),
          Cesium.ColorGeometryInstanceAttribute.fromColor(randomColor)
        );

        let temPoint = {};
        temPoint.lng = track.list[0].boundary[2];
        temPoint.lat = track.list[0].boundary[3];
        temPoint.height = track.list[0].floor_height;
        temPoint.trackId = track.track_id + ": 起点";
        temPoint.color = randomColor;
        startPoints.push(temPoint);

        let temPoint1 = {};
        temPoint1.lng = track.list[track.list.length - 1].boundary[2];
        temPoint1.lat = track.list[track.list.length - 1].boundary[3];
        temPoint1.height = track.list[track.list.length - 1].floor_height;
        temPoint1.trackId = track.track_id + ": 终点";
        temPoint1.color = randomColor;
        endPoints.push(temPoint1);
      });

      // 添加轨迹标注
      this.addTrackMarkers(startPoints);
      this.addTrackMarkers(endPoints);
    },

    // 添加轨迹标注
    addTrackMarkers(startPoints) {
      startPoints.forEach((point) => {
        this.trackViewer.entities.add({
          code: "track-name",
          position: Cesium.Cartesian3.fromDegrees(
            point.lng,
            point.lat,
            point.height
          ),
          label: {
            text: point.trackId,
            font: "14pt system-ui bold",
            fillColor: point.color,
            style: Cesium.LabelStyle.FILL,
            outlineWidth: 1,
            outlineColor: Cesium.Color.BLACK,
            showBackground: true,
            backgroundColor: Cesium.Color.WHITE.withAlpha(0.8),
            verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
            pixelOffset: new Cesium.Cartesian2(30, -5), //偏移量,
            style: Cesium.LabelStyle.FILL_AND_OUTLINE,
          },
        });
      });
    },

    // 构建轨迹
    buildTrack(formName) {
      this.clearDraw();

      this.$refs[formName].validate((valid) => {
        if (valid) {
          // 校验开始时间是否小于结束时间
          let startTime = this.ruleForm.startTime;
          let endTime = this.ruleForm.endTime;

          alert(typeof startTime);

          let res = endTime.getTime() - startTime.getTime();

          if (res < 0) {
            this.$message({
              type: "warning",
              message: "开始时间必须小于结束时间",
            });
            return;
          }

          let params = {
            track_id_list: this.ruleForm.trackId,
            start_time: GMTToStr(startTime),
            end_time: GMTToStr(endTime),
            map_height: Math.ceil(
              this.trackViewer.camera.positionCartographic.height
            ),
          };

          this.loadTrackData(params);
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    },

    // 重置轨迹
    resetTrack(formName) {
      this.$refs[formName].resetFields();
      this.showResult = false;
      this.clearDraw();
    },

    // 移除屏幕绘制
    clearDraw() {
      // 移除所有轨迹标注和折线
      this.trackViewer.entities.removeAll();

      // 移除所有轨迹网格
      this.track_grid_primitives.removeAll();

      // 地图复原
      this.trackViewer.camera.setView({
        destination: Cesium.Rectangle.fromDegrees(
          hubeiGeoRect[0],
          hubeiGeoRect[1],
          hubeiGeoRect[2],
          hubeiGeoRect[3]
        ),
      });
    },

    // 加载足迹数据
    loadTrackData(params) {
      server.trackList(params).then((response) => {
        if (response.server_status != 200) return;

        if (response.data.length < 1) {
          this.$message({
            type: "warning",
            message: "无足迹数据",
          });
          return;
        }

        this.drawTrack(response.data);
      });
    },

    // 验证人员id的有效性
    vertifyTheLegalOfIds(params) {
      server.vertifyIds(params).then((response) => {
        if (response.server_status != 200) return;

        this.isLegal = response.invalid_track_list.length == 0;

        if (response.invalid_track_list.length > 0) {
          this.$message({
            type: "warning",
            message: `无效人员: ${response.invalid_track_list.join(",")}`,
          });
        }
      });
    },
  },
  beforeDestroy() {
    window._axiosPromiseArr.forEach((ele, index) => {
      // 路由跳转之前，清空（终止）上一个页面正在请求的内容
      ele.cancel();
      // 清空请求的参数 清空请求的参数
      delete window._axiosPromiseArr[index];
    });

    this.trackViewer && this.trackViewer.destroy();
  },
};
</script>

<style scoped lang="scss">
@import url(../../assets/css/rightSide.css);

#trajectory-container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: black;

  .content-container {
    position: absolute;
    top: 70px;
    left: 10px;
    right: 10px;
    bottom: 10px;
    border: 1px solid rgba(3, 195, 255, 0.7);

    #trajectory-cesium {
      position: absolute;
      top: 10px;
      left: 10px;
      right: 360px;
      bottom: 10px;
      box-shadow: 0 0 5px 5px rgba(3, 195, 255, 0.7);
      border: 1px solid rgba(3, 195, 255, 0.7);
    }

    #right-side >>> .el-select__tags {
      min-height: 33px;
      max-height: 77px;
      overflow: scroll;
    }

    #track-result {
      position: absolute;
      top: 280px;
      left: 10px;
      right: 10px;
      bottom: 10px;
    }
  }
}
</style>

